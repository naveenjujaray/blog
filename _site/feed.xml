<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-29T22:23:51+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">NJ Blog</title><author><name>naveenjujaray</name></author><entry><title type="html">Build A Blog Using Jekyll And Deploy To Github Pages And Set Custom Domain</title><link href="http://localhost:4000/jekyll/update/2020/06/29/Build-A-Blog-Using-Jekyll.html" rel="alternate" type="text/html" title="Build A Blog Using Jekyll And Deploy To Github Pages And Set Custom Domain" /><published>2020-06-29T10:00:03+05:30</published><updated>2020-06-29T10:00:03+05:30</updated><id>http://localhost:4000/jekyll/update/2020/06/29/Build-A-Blog-Using-Jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/06/29/Build-A-Blog-Using-Jekyll.html">&lt;h1&gt;Build A Blog Using Jekyll And Deploy To Github Pages And Set Custom Domain&lt;/h1&gt;

&lt;p&gt;I recently decided to start a blog. I had used Wordpress in the past, so I knew I could get my blog up and running quickly using Wordpress. I was also slightly familiar with Jekyll. Doing a google search and reading a few blog posts educated me on benefits of Jekyll and static sites in general. I explored Jekyll a little more and loved it immediately.&lt;/p&gt;

&lt;p&gt;The first thing that appealed to me about Jekyll was how programmer-friendly it was. Creating a site using Jekyll felt very similar to a developer’s day-to-day tasks. Another thing that appealed to me was Jekyll’s integration with GitHub Pages. Finally, free hosting provided by GitHub Pages (along with the ability to set custom domains) tipped my decision towards using Jekyll.&lt;/p&gt;

&lt;p&gt;I have written this post to serve as a stand-alone tutorial, while also trying to keep it short. I briefly describe new terms and concepts as I introduce them, but do not go into much detail. Jekyll’s documentation is excellent and working through &lt;a href=&quot;&amp;quot;https://jekyllrb.com/docs/&amp;quot;&quot;&gt;Quickstart&lt;/a&gt; and &lt;a href=&quot;&amp;quot;https://jekyllrb.com/docs/step-by-step/01-setup/&amp;quot;&quot;&gt;Step-by-Step Tutorial&lt;/a&gt; should provide you good background on Jekyll.&lt;/p&gt;

&lt;p&gt;Let’s get started&lt;/p&gt;
&lt;h1&gt;Install Ruby Development Environment&lt;/h1&gt;

&lt;p&gt;You need Ruby development environment setup on your computer. Jekyll documentation provides the requirements list here. In addition, you also need bundler. You can install bundler by using the command gem install bundler.&lt;/p&gt;

&lt;h1&gt;Install Jekyll&lt;/h1&gt;

&lt;p&gt;Jekyll is a ruby gem. Install it by running the following command in a terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Create a new directory for your site&lt;/h1&gt;

&lt;p&gt;On your computer, create a directory to hold your site:&lt;/p&gt;

&lt;h1&gt;Create index.html in the new directory&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; with some content, such as:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;index.html&lt;/b&gt;&lt;/p&gt;

&lt;h1&gt;Serve the jekyll blog&lt;/h1&gt;

&lt;p&gt;In a terminal, run the following command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command generates the site files and runs a local web server at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000.&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;Install theme gem&lt;/h1&gt;

&lt;p&gt;You can use a theme to improve your site’s presentation. There is a wide selection of themes to choose from. You can get started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme which is provided by Jekyll. You can install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; gem using the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minima&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Create Gemfile&lt;/h1&gt;

&lt;p&gt;Create a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the root directory. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; is used to specify which gems your Jekyll site uses.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Gemfile&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minima'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Create Jekyll config file and add theme&lt;/h1&gt;

&lt;p&gt;You also need to set the theme in Jekyll’s configuration file. Jekyll reads configuration from a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in your site’s root directory. Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;_config.yml&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;theme: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minima&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After making any changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, you need to restart &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; for Jekyll to pickup configuration changes. Even after restarting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; serve, you will notice no difference in your site’s rendering. You will fix this next.&lt;/p&gt;

&lt;h1&gt;Update index.html to use a layout&lt;/h1&gt;

&lt;p&gt;In the previous section, you saw that the text of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index page&lt;/code&gt; rendered without any styling from the theme. This is happening because Jekyll is treating your index.html as a regular html file. You can tell Jekyll to use the theme’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt; layout by adding the following to the top of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is called the front matter. Jekyll does additional processing on any file containing a front matter.&lt;/p&gt;

&lt;p&gt;Minima theme provides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt; layout which is most suitable for a site’s index page. Among other things &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt; layout adds a list of recent posts to the home page.&lt;/p&gt;

&lt;p&gt;Try in browser. The index page of the site now renders in theme.&lt;/p&gt;
&lt;h1&gt;Add site title to config&lt;/h1&gt;

&lt;p&gt;With the site rendered in theme, it looks really good. Like most sites, you want your site to have a title too. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; variable’s value (if available) as title of your site. You can set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; variable by adding the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title: MyAwesomeBlog&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml.&lt;/code&gt; Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; should look like this now:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;theme: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minima&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyAwesomeBlog&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Restart &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; and refresh browser. You will notice that the value for title that you provided in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; now becomes the title of your site.&lt;/p&gt;

&lt;h1&gt;Create about page&lt;/h1&gt;

&lt;p&gt;Create an About page by creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file in the site’s root directory.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;about.md&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;About&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;about-me&quot;&gt;About me&lt;/h1&gt;
&lt;p&gt;This page will contain information about me.&lt;/p&gt;

&lt;p&gt;This file uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; layout provided by the theme.&lt;/p&gt;

&lt;p&gt;Try in browser. About link shows up in top bar. Jekyll automatically adds any html or markdown files that are in your root directory to navigation bar, using value of the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; from the page’s front matter as link text.&lt;/p&gt;

&lt;h1&gt;Create projects page&lt;/h1&gt;

&lt;p&gt;Add another page to your site. Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projects.md&lt;/code&gt; in the site’s root directory.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;projects.md&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Projects&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;projects&quot;&gt;Projects&lt;/h1&gt;
&lt;p&gt;Projects will be listed here.&lt;/p&gt;

&lt;p&gt;Try in browser. The navigation bar now shows Projects link too. Clicking on projects takes you to projects page.&lt;/p&gt;

&lt;h1&gt;Ordering navigation items&lt;/h1&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about&lt;/code&gt; and project pages added, the site is in good shape now. Suppose you want modify the order of items in the navigation bar with About appearing to the right of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projects&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All top-level pages are added to navigation bar in alphabetical order. Reordering navigation items is easily done by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header_pages&lt;/code&gt; configuration setting. Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header_pages&lt;/code&gt; to configuration and set its value to a list of pages in the order you wish them to appear.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;_config.yml&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;theme: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minima&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyAwesomeBlog&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;header_pages:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;md&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;md&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Try in browser. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;About&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project&lt;/code&gt; items now appear in your preferred order.&lt;/p&gt;

&lt;h1&gt;Add a blog post&lt;/h1&gt;

&lt;p&gt;Creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt; post is as simple as creating a directory and a file within that directory.&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; in the root directory of your site. Create a markdown (or html) file with year, month and day prefixed to the filename.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_posts&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_posts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Create a markdown file with year, month and day prefixed to the filename:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2018-09-12-my-first-post.md&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the contents of this blog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt;.
Notice that this file contains Jekyll front matter and sets the layout to post, which is another layout provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme.&lt;/p&gt;

&lt;p&gt;Try in browser. The site lists the post you just added. Clicking on the post title takes you to the post. Notice that the hyphen separated text portion of the file name becomes the title of the post. Also notice that a link to RSS feed is added.&lt;/p&gt;

&lt;h1&gt;Adding author name to post&lt;/h1&gt;

&lt;p&gt;In the blog post, you will notice that there is no author name being displayed. Jekyll minima theme supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt; name setting. It just needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt; variable to have a value. You can set author variable in the front matter of your post. Since it is likely that all posts on your site are written just by you, it is simpler to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt; once in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;scope:
      path: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;values:
      author: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Blog Author&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults&lt;/code&gt; is special Jekyll setting that allows you to set front matter defaults. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt; specifies which files this rule applies to. A blank path means the rule applies to all files in the site.&lt;/p&gt;

&lt;p&gt;Restart &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; and refresh browser page. The post now displays author name.&lt;/p&gt;

&lt;h1&gt;Deploying to GitHub Pages&lt;/h1&gt;

&lt;p&gt;This section describes how to host your site on GitHub Pages. GitHub allows you to host one user-level site on github pages. The github pages site for your github account should be created in a repository with the name username.github.io, where username is your GitHub username.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a repository on GitHub with the name username.github.io.&lt;/li&gt;
  &lt;li&gt;add the github-pages gem to Gemfile. This is a gem provided by GitHub to manage Jekyll and its dependencies. Read this for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Gemfile&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minima'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;github-pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;group: :jekyll_plugins&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;commit and push to your repository.&lt;/li&gt;
  &lt;li&gt;after a couple of minutes you can point your browser to http://username.github.io and your should see your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Using a custom domain&lt;/h1&gt;

&lt;p&gt;You can set a custom domain for your site you just deployed as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;purchase a domain name using service of your preference.&lt;/li&gt;
  &lt;li&gt;in the root directory of your blog site, create a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;add the domain name as file’s contents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;CNAME&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;myawesomedomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;commit and push the changes to your gitub repository.&lt;/li&gt;
  &lt;li&gt;to connect the domain name to your site, you need to update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALIAS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANAME&lt;/code&gt; records with your domain register.&lt;/li&gt;
  &lt;li&gt;for example, GoDaddy uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; records. If you registered your domain using GoDaddy, you can use IP addresses listed in this article to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; records.&lt;/li&gt;
  &lt;li&gt;set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; subdomain to redirect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myawesomedomain.com&lt;/code&gt; by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record with your domain register. This is not to be confused with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; file that you created earlier.&lt;/li&gt;
  &lt;li&gt;if GoDaddy is your domain register, no action needs to be taken. GoDaddy automatically sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Add Disqus commenting&lt;/h1&gt;

&lt;p&gt;Comments are essential component of any site. minima supports Disqus commenting system. Comments can be enabled for your posts by setting a configuration parameter. There are steps to add comments to your site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sign-up for Disqus Basic account.&lt;/li&gt;
  &lt;li&gt;on Disqus, add your site as organization (you will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myawesomedomain.com&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;in your site’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, enable Disqus commenting by adding the following:&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;
_config.yml&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;disqus:
  shortname: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;commit and push changes to your github repository.
After github pages regenerates the site in a few minutes, navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myawesomedomain.com&lt;/code&gt; in your browser. You should see Disqus comments displayed at bottom on your post page. Note that Disqus comments are not displayed when running the site locally using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This post described how you can deploy your personal blog to GitHub Pages hosted site. We used Jekyll site generator since that is the technology that GitHub Pages uses internally. We saw how easy and quick it was to get a basic site up and running. Creating a post was equally straight-forward. Finally, we applied a custom domain to our site.&lt;/p&gt;</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">Build A Blog Using Jekyll And Deploy To Github Pages And Set Custom Domain</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/06/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-06-23T12:59:03+05:30</published><updated>2020-06-23T12:59:03+05:30</updated><id>http://localhost:4000/jekyll/update/2020/06/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/06/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>