<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-01T23:46:41+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">NJ Blog</title><author><name>naveenjujaray</name></author><entry><title type="html">How to install Flutter</title><link href="http://localhost:4000/flutterinstall" rel="alternate" type="text/html" title="How to install Flutter" /><published>2020-07-01T19:41:03+05:30</published><updated>2020-07-01T19:41:03+05:30</updated><id>http://localhost:4000/flutter-install</id><content type="html" xml:base="http://localhost:4000/flutterinstall">Select the operating system on which you are installing Flutter:&lt;br&gt;
[windows] &lt;i class=&quot;fab fa-windows&quot;&gt;&lt;/i&gt;    [MacOS] &lt;i class=&quot;fab fa-apple&quot;&gt;&lt;/i&gt;    [Linux] &lt;i class=&quot;fab fa-linux&quot;&gt;&lt;/i&gt;

## For Windows
### System requirements
To install and run Flutter, your development environment must meet these minimum requirements:
* **Operating Systems:** Windows 7 SP1 or later (64-bit)
* **Disk Space:** 400 MB (does not include disk space for IDE/tools).
* **Tools:** Flutter depends on these tools being available in your environment.
  * [Windows PowerShell 5.0] or newer (this is pre-installed with Windows 10)
  * [Git for Windows] 2.x, with the **Use Git from the Windows Command Prompt** option.
  
    If Git for Windows is already installed, make sure you can run `git` commands from the command prompt or PowerShell.

### Get the Flutter SDK
- Download the following installation bundle to get the latest stable release of the Flutter SDK:
   For `other release channels`, and `older builds`, see the [SDK archive] page.
- Extract the zip file and place the contained flutter in the desired installation location for the Flutter SDK (for example, `C:\src\flutter;` do not install Flutter in a directory like `C:\Program Files\` that requires elevated privileges).
- If you don’t want to install a fixed version of the installation bundle, you can `skip` steps 1 and 2. Instead, get the source code from the [Flutter repo] on GitHub, and change branches or tags as needed. For example:
{% highlight ruby %}
git clone https://github.com/flutter/flutter.git -b stable
{% endhighlight %}
You are now ready to run Flutter commands in the Flutter Console.
### Update your path
If you wish to run Flutter commands in the regular Windows console, take these steps to add Flutter to the `PATH` environment variable:
* From the Start search bar, enter ‘env’ and select **Edit environment variables for your account**.
* Under **User variables** check if there is an entry called **Path**:
    * If the entry exists, append the full path to `flutter\bin` using ; as a separator from existing values.
    * If the entry doesn’t exist, create a new user variable named `Path` with the full path to `flutter\bin` as its value.
&lt;br&gt;

You have to close and reopen any existing console windows for these changes to take effect.

### Run flutter doctor
From a console window that has the Flutter directory in the path (see above), run the following command to see if there are any platform dependencies you need to complete the setup:
{% highlight ruby %}
C:\src\flutter&gt;flutter doctor
{% endhighlight %}
This command checks your environment and displays a report of the status of your Flutter installation. Check the output carefully for other software you might need to install or further tasks to perform (shown in X mark).

For example:

{% highlight ruby %}
[-] Android toolchain - develop for Android devices
    • Android SDK at D:\Android\sdk
    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ
    • Try re-installing or updating your Android SDK,
      visit https://flutter.dev/setup/#android-setup for detailed instructions.
{% endhighlight %}

## For MacOS
To install and run Flutter, your development environment must meet these minimum requirements:

* **Operating Systems:** macOS (64-bit)
* **Disk Space:** 2.8 GB (does not include disk space for IDE/tools).
* **Tools:** Flutter depends on these command-line tools being available in your environment.
    * `bash`
    * `curl`
    * `git` 2.x
    * `mkdir`
    *  `rm`
    * `unzip`
    * `which`
    * `zip`

### Get the Flutter SDK
* Download the following installation bundle to get the latest stable release of the Flutter SDK:
  For other release channels, and older builds, see the [SDK archive] page.
* Extract the file in the desired location, for example:
{% highlight ruby %}
 $ cd ~/development
 $ unzip ~/Downloads/flutter_macos_1.17.4-stable.zip
{% endhighlight %}
* If you don’t want to install a fixed version of the installation bundle, you can skip steps 1 and 2. Instead, get the source code from the [Flutter repo] on GitHub with the following command:
{% highlight ruby %}
$ git clone https://github.com/flutter/flutter.git
{% endhighlight %}
You can also change branches or tags as needed. For example, to get just the stable version:
{% highlight ruby %}
$  git clone https://github.com/flutter/flutter.git -b stable --depth 1
{% endhighlight %}
Add the `flutter tool` to your path:
{% highlight ruby %}
$  export PATH=&quot;$PATH:`pwd`/flutter/bin&quot;
{% endhighlight %}
This command sets your `PATH` variable for the current terminal window only. To permanently add Flutter to your path, see [Update your path].
* Optionally, pre-download development binaries:

The flutter tool downloads platform-specific development binaries as needed. For scenarios where pre-downloading these artifacts is preferable (for example, in hermetic build environments, or with intermittent network availability), iOS and Android binaries can be downloaded ahead of time by running:
{% highlight ruby %}
$  flutter precache
{% endhighlight %}
For additional download options, see `flutter help precache`.

You are now ready to run Flutter commands!

### Run flutter doctor

Run the following command to see if there are any dependencies you need to install to complete the setup (for verbose output, add the `-v` flag):
{% highlight ruby %}
$  flutter doctor
{% endhighlight %}

This command checks your environment and displays a report to the terminal window. The Dart SDK is bundled with Flutter; it is not necessary to install Dart separately. Check the output carefully for other software you might need to install or further tasks to perform (shown in X mark).

For example:

{% highlight ruby %}
[-] Android toolchain - develop for Android devices
    • Android SDK at /Users/obiwan/Library/Android/sdk
    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ
    • Try re-installing or updating your Android SDK,
      visit https://flutter.dev/setup/#android-setup for detailed instructions.
{% endhighlight %}
The following sections describe how to perform these tasks and finish the setup process.

Once you have installed any missing dependencies, run the flutter doctor command again to verify that you’ve set everything up correctly.

### Update your path
You can update your PATH variable for the current session at the command line, as shown in [Get the Flutter SDK]. You’ll probably want to update this variable permanently, so you can run `flutter` commands in any terminal session.

The steps for modifying this variable permanently for all terminal sessions are machine-specific. Typically you add a line to a file that is executed whenever you open a new window. For example:
* Determine the directory where you placed the Flutter SDK. You need this in Step 3.
* Open (or create) the rc file for your shell. Typing `echo $SHELL` in your Terminal tells you which shell you’re using. If you’re using  Bash, edit `$HOME/.bash_profile` or `$HOME/.bashrc.` If you’re using Z shell, edit `$HOME/.zshrc`. If you’re using a different shell, the    file path and filename will be different on your machine.
* Add the following line and change `PATH_TO_FLUTTER_GIT_DIRECTORY` to be the path where you cloned Flutter’s git repo:
{% highlight ruby %}
$ export PATH=&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&quot;
{% endhighlight %}
* Run source $HOME/.&lt;rc file&gt; to refresh the current window, or open a new terminal window to automatically source the file.
* Verify that the flutter/bin directory is now in your PATH by running:
{% highlight ruby %}
$ echo $PATH
{% endhighlight %}
Verify that the flutter command is available by running:
{% highlight ruby %}
$ which flutter
{% endhighlight %}

# For LINUX
###System requirements
To install and run Flutter, your development environment must meet these minimum requirements:

* **Operating Systems:** Linux (64-bit)
* **Disk Space:** 600 MB (does not include disk space for IDE/tools).
* **Tools:** Flutter depends on these command-line tools being available in your environment.
    * `bash`
    * `curl`
    * `file`
    * `git` 2.x
    * `mkdir`
    * `rm`
    * `unzip`
    * `which`
    * `xz-utils`
    * `zip`
* **Shared libraries:** Flutter `test` command depends on this library being available in your environment.
    * `libGLU.so.1` - provided by mesa packages such as `libglu1-mesa` on Ubuntu/Debian
### Get the Flutter SDK
* Download the following installation bundle to get the latest stable release of the Flutter SDK:
For other release channels, and older builds, see the [SDK archive] page.
* Extract the file in the desired location, for example:
{% highlight ruby %}
$  cd ~/development
$  tar xf ~/Downloads/flutter_linux_1.17.4-stable.tar.xz
{% endhighlight %}
If you don’t want to install a fixed version of the installation bundle, you can skip steps 1 and 2. Instead, get the source code from the [Flutter repo] on GitHub with the following command:
{% highlight ruby %}
$  git clone https://github.com/flutter/flutter.git
{% endhighlight %}
You can also change branches or tags as needed. For example, to get just the stable version:
{% highlight ruby %}
$  git clone https://github.com/flutter/flutter.git -b stable --depth 1
{% endhighlight %}
* Add the flutter tool to your path:
{% highlight ruby %}
$  export PATH=&quot;$PATH:`pwd`/flutter/bin&quot;
{% endhighlight %}
This command sets your PATH variable for the current terminal window only. To permanently add Flutter to your path, see [Update your path].
* Optionally, pre-download development binaries:

The `flutter` tool downloads platform-specific development binaries as needed. For scenarios where pre-downloading these artifacts is preferable (for example, in hermetic build environments, or with intermittent network availability), iOS and Android binaries can be downloaded ahead of time by running:
{% highlight ruby %}
$ flutter precache
{% endhighlight %}
For additional download options, see `flutter help precache.`

You are now ready to run Flutter commands!
### Run flutter doctor

Run the following command to see if there are any dependencies you need to install to complete the setup (for verbose output, add the `-v` flag):
{% highlight ruby %}
$  flutter doctor
{% endhighlight %}

This command checks your environment and displays a report to the terminal window. The Dart SDK is bundled with Flutter; it is not necessary to install Dart separately. Check the output carefully for other software you might need to install or further tasks to perform (shown in X mark).

For example:

{% highlight ruby %}
[-] Android toolchain - develop for Android devices
    • Android SDK at /Users/obiwan/Library/Android/sdk
    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ
    • Try re-installing or updating your Android SDK,
      visit https://flutter.dev/setup/#android-setup for detailed instructions.
{% endhighlight %}
The following sections describe how to perform these tasks and finish the setup process.

Once you have installed any missing dependencies, run the flutter doctor command again to verify that you’ve set everything up correctly.
### Update your path
You can update your PATH variable for the current session at the command line, as shown in [Get the Flutter SDK]. You’ll probably want to update this variable permanently, so you can run `flutter` commands in any terminal session.

The steps for modifying this variable permanently for all terminal sessions are machine-specific. Typically you add a line to a file that is executed whenever you open a new window. For example:

* Determine the directory where you placed the Flutter SDK. You need this in Step 3.
* Open (or create) the rc file for your shell. For example, Linux uses the Bash shell by default, so edit `$HOME/.bashrc`. If you are using a different shell, the file path and filename will be different on your machine.
* Add the following line and change `PATH_TO_FLUTTER_GIT_DIRECTORY` to be the path where you cloned Flutter’s git repo:
{% highlight ruby %}
$ export PATH=&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&quot;
{% endhighlight %}
* Run source `$HOME/.&lt;rc file&gt;` to refresh the current window, or open a new terminal window to automatically source the file.
* Verify that the `flutter/bin` directory is now in your PATH by running:
{% highlight ruby %}
$  echo $PATH
{% endhighlight %}
Verify that the `flutter` command is available by running:
{% highlight ruby %}
$  which flutter
{% endhighlight %}

[windows]: https://flutter.dev/docs/get-started/install/windows
[MacOS]: https://flutter.dev/docs/get-started/install/macos
[Linux]: https://flutter.dev/docs/get-started/install/linux
[Windows PowerShell 5.0]: https://docs.microsoft.com/en-us/powershell/scripting/install/installing-windows-powershell
[Git for Windows]: https://git-scm.com/download/win
[SDK archive]: https://flutter.dev/docs/development/tools/sdk/archive
[Flutter repo]: https://github.com/flutter/flutter
[Update your path]: https://flutter.dev/docs/get-started/install/macos#update-your-path
[Get the Flutter SDK]: https://flutter.dev/docs/get-started/install/macos#get-sdk</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">Select the operating system on which you are installing Flutter: windows MacOS Linux</summary></entry><entry><title type="html">Jekyll Minima Theme - A Few Settings</title><link href="http://localhost:4000/minimathemesettings" rel="alternate" type="text/html" title="Jekyll Minima Theme - A Few Settings" /><published>2020-06-30T16:00:03+05:30</published><updated>2020-06-30T16:00:03+05:30</updated><id>http://localhost:4000/jekyll-minima-theme-a-few-settings</id><content type="html" xml:base="http://localhost:4000/minimathemesettings">This post is a follow-up of my earlier post about building a jekyll site.

In this post, I will describe a few things that I modified on my site. For example, the footer show site title twice, I add a `_config.yml` setting to show blog author name instead of one of the site titles.

&lt;h2&gt;Add site description&lt;/h2&gt;
The blog site that you deployed earlier (as described in the post referenced above) should look pretty good, but we can make a few quick improvements to make it look even better.

Add a variable `description` to your `_config.yml` and set its value to a short description of your site.

&lt;b&gt;_config.yml&lt;/b&gt;
{% highlight ruby %}
description: This blog includes posts related to topic A, topic B and topic C.
{% endhighlight %}
Try in browser. The description now displays in footer.

&lt;h2&gt;Modify title above list of posts&lt;/h2&gt;
On the Home/Index page, the list of posts are preceded by a title “Posts”. You can change it to a different title. Suppose, you want the title to be “Latest Posts”. This is easily achieved by adding a variable to `index.html`’s front matter:
{% highlight ruby %}
---
layout: home
list_title: &quot;Latest Posts&quot;
---
{% endhighlight %}
Try in browser. The Home page displays “Latest Posts” as the title above list of posts.

&lt;h2&gt;Add github, twitter and rss links to footer&lt;/h2&gt;
Github, Twitter and RSS links can be added to footer by simply setting variables in `_config.yml`.

The link to RSS feed is already displayed at the end of list of posts on the Home page. But adding a variable in `_config.yml` and setting it to just `rss` also adds a link in the footer.

&lt;b&gt;_config.yml&lt;/b&gt;
{% highlight ruby %}
github_username: your_github_username
twitter_username: your_twitter_username
rss: rss
{% endhighlight %}
Try in browser. Github, Twitter and RSS links are displayed nicely stacked in the footer.

&lt;h2&gt;Modify footer to display blog author name&lt;/h2&gt;
Now the setting that I mentioned at the beginning of this post - displaying blog author name in the footer, instead of displaying site title twice.

The Minima theme displays the site title a second time, because it looks for site `author` variable and if the `author` variable is not present it uses `title` variable as default value.

So, to make this changes, you can simply add `author` variable to `_config.yml`.
{% highlight ruby %}
author: &quot;Blog Author&quot;
{% endhighlight %}
Try in browser. Footer should now display blog author name instead of site title be displayed a second time.

&lt;h2&gt;Google Analytics&lt;/h2&gt;
You can add Google analytics to your site by adding the following setting to `_config.yml`:
{% highlight ruby %}
google_analytics: UA-XXXXXXXX-X
{% endhighlight %}</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">This post is a follow-up of my earlier post about building a jekyll site.</summary></entry><entry><title type="html">Customizing A Jekyll Theme Layout</title><link href="http://localhost:4000/customizejekyll" rel="alternate" type="text/html" title="Customizing A Jekyll Theme Layout" /><published>2020-06-30T06:00:03+05:30</published><updated>2020-06-30T06:00:03+05:30</updated><id>http://localhost:4000/Customizing-A-Jekyll-Theme</id><content type="html" xml:base="http://localhost:4000/customizejekyll">After I started a blog, as described in [this][this] post, I felt it would be cool to convert the author name shown on top of each post to a link to the `about` page. This was a minor change, but it required me to customize `minima` theme’s `post` layout.

I describe the steps that I used to customize `minima’`s `post.html` layout in this post.
&lt;h2&gt;Customizing theme files&lt;/h2&gt;

You can modify a jekyll theme’s functionality by copying a specific file from theme gem and then modifying it. Jekyll uses local files of the same name to override the theme behavior. In addition, the local folder name has to be identical to the folder name in gem where you copied the file from.

&lt;h2&gt;Create a folder in your site root directory&lt;/h2&gt;
Since you are modifying the `post` layout, you need create a copy of the file in your local site. You need the following steps:

In the root directory of the site, create a `_layouts` directory:

{% highlight ruby %}
$ mkdir _layouts
{% endhighlight %}

&lt;h2&gt;Locate minima gem’s post.html on your computer&lt;/h2&gt;
You need to determine where Ruby gems are stored on your computer.

You can figure out Ruby gem folder location by running the command `gem environment` and looking for the value of `INSTALLATION DIRECTORY` field. The command output should look something like:
{% highlight ruby %}
$ gem environment

RubyGems Environment:
  ...

  - INSTALLATION DIRECTORY: /path/to/your/ruby/installation/lib/ruby/gems/2.3.0

  ...
{% endhighlight %}
The `minima` gem files are located within this folder:
{% highlight ruby %}
$ ls -l /path/to/your/ruby/installation/lib/ruby/gems/2.3.0/gems/minima-2.5.0
{% endhighlight %}

The file you want to copy and modify is located within the `_layouts` folder:

{% highlight ruby %}
$ ls -l /path/to/your/ruby/installation/lib/ruby/gems/2.3.0/gems/minima-2.5.0/_layouts
default.html
home.html
page.html
&lt;b&gt;post.html&lt;/b&gt;
{% endhighlight %}

An alternative way to figure out the location of gem files is by using the command `bundle show minima`.

#Copy the gem post.html to your site
Copy `_layouts/post.html` from minima ruby gem folder into the local `_layouts` directory just created. Go to your site’s root directory and then run the following commands:

{% highlight ruby %}
$ cd _layouts
$ cp /path/to/your/ruby/installation/lib/ruby/gems/2.3.0/gems/minima-2.5.0/_layouts/post.html .
{% endhighlight %}

&lt;h2&gt;Make author name a link&lt;/h2&gt;
Open `post.html` in an editor and locate the line that you want to modify. The html that you want to modify is shown below:

{% highlight ruby %}
&lt;span itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;&lt;span class=&quot;p-author h-card&quot; itemprop=&quot;name&quot;&gt;Naveen Jujaray&lt;/span&gt;&lt;/span&gt;
{% endhighlight %}

Add an anchor element around `{{ page.author }}` as follows:

{% highlight ruby %}
&lt;span itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;&lt;span class=&quot;p-author h-card&quot; itemprop=&quot;name&quot;&gt;&lt;a href=&quot;/about.html&quot;&gt;Naveen Jujaray&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;
{% endhighlight %}
Try in browser. In the post, the author name should now be a link. Clicking on the author name should take you to the about page.

[this]: https://njblog.onrender.com/jekyll/update/2020/06/29/Build-A-Blog-Using-Jekyll.html</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">After I started a blog, as described in this post, I felt it would be cool to convert the author name shown on top of each post to a link to the about page. This was a minor change, but it required me to customize minima theme’s post layout.</summary></entry><entry><title type="html">Build A Blog Using Jekyll And Deploy To Github Pages And Set Custom Domain</title><link href="http://localhost:4000/buildblogusingjekyll" rel="alternate" type="text/html" title="Build A Blog Using Jekyll And Deploy To Github Pages And Set Custom Domain" /><published>2020-06-29T10:00:03+05:30</published><updated>2020-06-29T10:00:03+05:30</updated><id>http://localhost:4000/Build-A-Blog-Using-Jekyll</id><content type="html" xml:base="http://localhost:4000/buildblogusingjekyll">I recently decided to start a blog. I had used Wordpress in the past, so I knew I could get my blog up and running quickly using Wordpress. I was also slightly familiar with Jekyll. Doing a google search and reading a few blog posts educated me on benefits of Jekyll and static sites in general. I explored Jekyll a little more and loved it immediately.

The first thing that appealed to me about Jekyll was how programmer-friendly it was. Creating a site using Jekyll felt very similar to a developer’s day-to-day tasks. Another thing that appealed to me was Jekyll’s integration with GitHub Pages. Finally, free hosting provided by GitHub Pages (along with the ability to set custom domains) tipped my decision towards using Jekyll.

I have written this post to serve as a stand-alone tutorial, while also trying to keep it short. I briefly describe new terms and concepts as I introduce them, but do not go into much detail. Jekyll’s documentation is excellent and working through [Quickstart][Quickstart] and [Step-by-Step Tutorial][Step-by-Step Tutorial] should provide you good background on Jekyll.

Let’s get started
&lt;h2&gt;Install Ruby Development Environment&lt;/h2&gt;

You need Ruby development environment setup on your computer. Jekyll documentation provides the requirements list here. In addition, you also need bundler. You can install bundler by using the command gem install bundler.

&lt;h2&gt;Install Jekyll&lt;/h2&gt;

Jekyll is a ruby gem. Install it by running the following command in a terminal:
{% highlight ruby %}
$ gem install jekyll
{% endhighlight %}
&lt;h2&gt;Create a new directory for your site&lt;/h2&gt;

On your computer, create a directory to hold your site:

&lt;h2&gt;Create index.html in the new directory&lt;/h2&gt;
{% highlight ruby %}
$ cd my-site
{% endhighlight %}
Create `index.html` with some content, such as:

&lt;b&gt;index.html&lt;/b&gt;

&lt;h2&gt;Serve the jekyll blog&lt;/h2&gt;

In a terminal, run the following command
{% highlight ruby %}
$ jekyll serve
{% endhighlight %}

This command generates the site files and runs a local web server at `http://localhost:4000.`

&lt;h2&gt;Install theme gem&lt;/h2&gt;

You can use a theme to improve your site’s presentation. There is a wide selection of themes to choose from. You can get started with `minima` theme which is provided by Jekyll. You can install `minima` gem using the following command:
{% highlight ruby %}
$ gem install minima
{% endhighlight %}
&lt;h2&gt;Create Gemfile&lt;/h2&gt;

Create a file `Gemfile` in the root directory. `Gemfile` is used to specify which gems your Jekyll site uses.

&lt;b&gt;Gemfile&lt;/b&gt;
{% highlight ruby %}
source 'https://rubygems.org'
gem 'minima'
{% endhighlight %}
&lt;h2&gt;Create Jekyll config file and add theme&lt;/h2&gt;

You also need to set the theme in Jekyll’s configuration file. Jekyll reads configuration from a file named `_config.yml` in your site’s root directory. Create `_config.yml` with the following contents:

&lt;b&gt;_config.yml&lt;/b&gt;
{% highlight ruby %}
theme: minima
{% endhighlight %}
After making any changes to `_config.yml`, you need to restart `jekyll serve` for Jekyll to pickup configuration changes. Even after restarting `jekyll` serve, you will notice no difference in your site’s rendering. You will fix this next.

&lt;h2&gt;Update index.html to use a layout&lt;/h2&gt;

In the previous section, you saw that the text of your `index page` rendered without any styling from the theme. This is happening because Jekyll is treating your index.html as a regular html file. You can tell Jekyll to use the theme’s `home` layout by adding the following to the top of your `index.html`:
{% highlight ruby %}
---
layout: home
---
{% endhighlight %}
This is called the front matter. Jekyll does additional processing on any file containing a front matter.

Minima theme provides a `home` layout which is most suitable for a site’s index page. Among other things `home` layout adds a list of recent posts to the home page.

Try in browser. The index page of the site now renders in theme.
&lt;h2&gt;Add site title to config&lt;/h2&gt;

With the site rendered in theme, it looks really good. Like most sites, you want your site to have a title too. The `minima` theme uses `title` variable’s value (if available) as title of your site. You can set `title` variable by adding the line `title: MyAwesomeBlog` to `_config.yml.` Your `_config.yml` should look like this now:

&lt;b&gt;&lt;/b&gt;
{% highlight ruby %}
theme: minima
title: MyAwesomeBlog
{% endhighlight %}
Restart `jekyll serve` and refresh browser. You will notice that the value for title that you provided in `_config.yml` now becomes the title of your site.

&lt;h2&gt;Create about page&lt;/h2&gt;

Create an About page by creating a `about.md` file in the site’s root directory.

&lt;b&gt;about.md&lt;/b&gt;
{% highlight ruby %}
---
layout: page
title: About
---
{% endhighlight %}
# About me
This page will contain information about me.

This file uses the `page` layout provided by the theme.

Try in browser. About link shows up in top bar. Jekyll automatically adds any html or markdown files that are in your root directory to navigation bar, using value of the variable `title` from the page’s front matter as link text.

&lt;h2&gt;Create projects page&lt;/h2&gt;

Add another page to your site. Create `projects.md` in the site’s root directory.

&lt;b&gt;projects.md&lt;/b&gt;
{% highlight ruby %}
---
layout: page
title: Projects
---
{% endhighlight %}
# Projects
Projects will be listed here.

Try in browser. The navigation bar now shows Projects link too. Clicking on projects takes you to projects page.

&lt;h2&gt;Ordering navigation items&lt;/h2&gt;

With `about` and project pages added, the site is in good shape now. Suppose you want modify the order of items in the navigation bar with About appearing to the right of `Projects`.

All top-level pages are added to navigation bar in alphabetical order. Reordering navigation items is easily done by using `header_pages` configuration setting. Add `header_pages` to configuration and set its value to a list of pages in the order you wish them to appear.

&lt;b&gt;_config.yml&lt;/b&gt;
{% highlight ruby %}
theme: minima
title: MyAwesomeBlog
header_pages:
  - projects.md
  - about.md
{% endhighlight %}
Try in browser. The `About` and `Project` items now appear in your preferred order.

&lt;h2&gt;Add a blog post&lt;/h2&gt;

Creating a `blog` post is as simple as creating a directory and a file within that directory.

Create a folder called `_posts` in the root directory of your site. Create a markdown (or html) file with year, month and day prefixed to the filename.
{% highlight ruby %}
$ mkdir _posts
$ cd _posts
{% endhighlight %}
Create a markdown file with year, month and day prefixed to the filename:

&lt;b&gt;2018-09-12-my-first-post.md&lt;/b&gt;
{% highlight ruby %}
---
layout: post
---
{% endhighlight %}
This is the contents of this blog `post`.
Notice that this file contains Jekyll front matter and sets the layout to post, which is another layout provided by `minima` theme.

Try in browser. The site lists the post you just added. Clicking on the post title takes you to the post. Notice that the hyphen separated text portion of the file name becomes the title of the post. Also notice that a link to RSS feed is added.

&lt;h2&gt;Adding author name to post&lt;/h2&gt;

In the blog post, you will notice that there is no author name being displayed. Jekyll minima theme supports `author` name setting. It just needs `author` variable to have a value. You can set author variable in the front matter of your post. Since it is likely that all posts on your site are written just by you, it is simpler to set `author` once in `_config.yml`.

Add the following to `_config.yml`:
{% highlight ruby %}
  - scope:
      path: &quot;&quot;
    values:
      author: &quot;Blog Author&quot;
{% endhighlight %}

`defaults` is special Jekyll setting that allows you to set front matter defaults. `path` under `scope` specifies which files this rule applies to. A blank path means the rule applies to all files in the site.

Restart `jekyll serve` and refresh browser page. The post now displays author name.

&lt;h2&gt;Deploying to GitHub Pages&lt;/h2&gt;

This section describes how to host your site on GitHub Pages. GitHub allows you to host one user-level site on github pages. The github pages site for your github account should be created in a repository with the name username.github.io, where username is your GitHub username.

* create a repository on GitHub with the name username.github.io.
* add the github-pages gem to Gemfile. This is a gem provided by GitHub to manage Jekyll and its dependencies. Read this for more details.

&lt;b&gt;Gemfile&lt;/b&gt;
{% highlight ruby %}
source 'https://rubygems.org'
gem 'minima'
gem &quot;github-pages&quot;, group: :jekyll_plugins
{% endhighlight %}

* commit and push to your repository.
* after a couple of minutes you can point your browser to http://username.github.io and your should see your site.


&lt;h2&gt;Using a custom domain&lt;/h2&gt;

You can set a custom domain for your site you just deployed as follows:


* purchase a domain name using service of your preference.
* in the root directory of your blog site, create a file `CNAME`.
* add the domain name as file’s contents.

&lt;b&gt;CNAME&lt;/b&gt;
{% highlight ruby %}
myawesomedomain.com
{% endhighlight %}
* commit and push the changes to your gitub repository.
* to connect the domain name to your site, you need to update `ALIAS`, `A` or `ANAME` records with your domain register.
* for example, GoDaddy uses `A` records. If you registered your domain using GoDaddy, you can use IP addresses listed in this article to set `A` records.
* set the `www` subdomain to redirect to `myawesomedomain.com` by adding a `CNAME` record with your domain register. This is not to be confused with the `CNAME` file that you created earlier.
* if GoDaddy is your domain register, no action needs to be taken. GoDaddy automatically sets the `CNAME` record.


&lt;h2&gt;Add Disqus commenting&lt;/h2&gt;

Comments are essential component of any site. minima supports Disqus commenting system. Comments can be enabled for your posts by setting a configuration parameter. There are steps to add comments to your site:

* sign-up for Disqus Basic account.
* on Disqus, add your site as organization (you will use `myawesomedomain.com`).
* in your site’s `_config.yml`, enable Disqus commenting by adding the following:
* 
&lt;b&gt;
_config.yml&lt;/b&gt;
{% highlight ruby %}
disqus:
  shortname: &lt;site-shortname-from-disqus&gt;
  {% endhighlight %}
commit and push changes to your github repository.
After github pages regenerates the site in a few minutes, navigate to `myawesomedomain.com` in your browser. You should see Disqus comments displayed at bottom on your post page. Note that Disqus comments are not displayed when running the site locally using `jekyll serve`.

&lt;h2&gt;Conclusion&lt;/h2&gt;

This post described how you can deploy your personal blog to GitHub Pages hosted site. We used Jekyll site generator since that is the technology that GitHub Pages uses internally. We saw how easy and quick it was to get a basic site up and running. Creating a post was equally straight-forward. Finally, we applied a custom domain to our site.

[Quickstart]: &quot;https://jekyllrb.com/docs/&quot;
[Step-by-Step Tutorial]: &quot;https://jekyllrb.com/docs/step-by-step/01-setup/&quot;</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">I recently decided to start a blog. I had used Wordpress in the past, so I knew I could get my blog up and running quickly using Wordpress. I was also slightly familiar with Jekyll. Doing a google search and reading a few blog posts educated me on benefits of Jekyll and static sites in general. I explored Jekyll a little more and loved it immediately.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/welocmetojekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-06-23T12:59:03+05:30</published><updated>2020-06-23T12:59:03+05:30</updated><id>http://localhost:4000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/welocmetojekyll">You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts &quot;Hi, #{name}&quot;
end
print_hi('Tom')
#=&gt; prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/</content><author><name>naveenjujaray</name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>